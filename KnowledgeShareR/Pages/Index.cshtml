@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
    var question = Model.Question;
    var answers = Model.Answers;
    var answerArr = answers.Select(x => x.Text).ToArray();
}
@if (User.Identity.IsAuthenticated)
{
    <div class="user-list">
        <h2>Connected Users</h2>
        <ul id="usersList">
        </ul>
    </div>
    <div class="container">
        <div class="row">
            <div class="question-answer col-12">
                <h2>@question.Text</h2>
                <ul class="list-group">
                    @foreach (var item in answers)
                    {
                        <li class="list-group-item">@item.Text</li>
                    }
                </ul>
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                <h2>User Votes</h2>
                <ul id="messagesList"></ul>
            </div>

            <div id="chartContainer" class="col-6" style="height: 370px; width: 100%;"></div>
        </div>
    </div>
}
else
{
    <div class="container">
        <a href="/Identity/Account/Login">Please Login</a>
    </div>
}

<script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
<script>
    var chartTitle = "@Html.Raw(question.Text)";
    var answers = @Html.Raw(Json.Serialize(answerArr));

    var initDataPoints = [];
    answers.map(x => initDataPoints.push({ label : x }));

    var chart = new CanvasJS.Chart("chartContainer", {
        animationEnabled: true,
        theme: "light2", // "light1", "light2", "dark1", "dark2"
        title: {
            text: chartTitle
        },
        axisY: {
            title: "Votes"
        },
        data: [{
            type: "column",
            showInLegend: true,
            legendMarkerColor: "grey",
            legendText: "Users",
            dataPoints: initDataPoints
        }]
    });

    chart.render();
</script>

